# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2020-2021 Huawei Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

stages:
  - compliance
  - build
  - test

include:
 - project: 'OSTC/infrastructure/pipelines'
   file:
    - 'dco.yaml'
    - 'reuse.yaml'
    - 'workspace.yaml'
 - project: 'OSTC/OHOS/manifest'
   file:
    # Include the set of build flavours.
    - '.ostc-ci/build-flavours.yaml'
    # Include the set of templates and jobs that use develop.xml.
    - '.ostc-ci/develop-targets.yaml'

dco:
  extends: .dco

reuse:
  extends: .reuse
  # FIXME: https://git.ostc-eu.org/OSTC/OHOS/meta-ohos/-/issues/19
  allow_failure: true


.build:
  # Extend the workspace job. This effectively gives us an assembled tree and
  # initialized bitbake. Some essential variables are defined in later jobs,
  # like .build-linux, which sets OHOS_BUILD_FLAVOUR, which is inherited from
  # the .workspace job.
  extends: .workspace
  stage: build
  # Conservative timeout in case the build machine is busy and the cache is cold.
  timeout: 3 hours
  variables:
    # Name of the bitbake recipe to build. This must be set by specific jobs
    # which extend the .build job template.
    OHOS_RECIPE_NAME: ""
    # Set to non-empty value to accept Freescale EULA.
    OHOS_ACCEPT_FSL_EULA: ""
    # The path of the git repository to deviate from what the git-repo manifest
    # prepares. This effectively allows testing incoming changes that match the
    # repository holding this CI pipeline.
    #
    # The path is relative to the checked out "sources/" directory.
    OHOS_GIT_REPO_PATH: "meta-ohos"
  before_script:
    # Check if the job is configured properly.
    - test -n "$OHOS_RECIPE_NAME" || (
        echo "precondition failed - set OHOS_RECIPE_NAME to the name of the recipe to build"
        && exit 1 )
    - test -n "$OHOS_GIT_REPO_PATH" || (
        echo "precondition failed - set OHOS_GIT_REPO_PATH to the path of the git repository as described by the manifest"
        && exit 1 )
    - !reference [.workspace, before_script]
    # Switch the git repository which is being tested to the revision described
    # by the CI environment variables. This effectively performs the update
    # corresponding to the layer landing in either stable manifest or the
    # development manifest.
    - ( cd "$SCRATCH_DIR"/sources/"$OHOS_GIT_REPO_PATH" && git checkout "$CI_COMMIT_SHA" )
  script:
    - !reference [.workspace, script]
    # Accept Freescale EULA if required.
    - if [ -n "$OHOS_ACCEPT_FSL_EULA" ]; then
         echo 'ACCEPT_FSL_EULA = "1"' >> conf/local.conf;
      fi
    # Build the desired recipe.
    - time bitbake "$OHOS_RECIPE_NAME"
    # Move artifacts for recovery, which only considers $CI_PROJECT_DIR and
    # subdirectories.
    - mkdir -p "$CI_PROJECT_DIR"/artifacts
    - mv tmp/deploy/images/ "$CI_PROJECT_DIR"/artifacts || true
    - mv tmp/deploy/licenses/ "$CI_PROJECT_DIR"/artifacts || true
    # TODO: copy all build logs as well.
  artifacts:
    paths:
      - artifacts/
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
